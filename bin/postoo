#!/usr/bin/env python3

""" General postprocesssing script. 
Dumps images into <postdir>.
"""

from chromoo import ConfigHandler
from pathlib import Path
from rich import print

import argparse
import chromoo.post as post
import os
import shutil

def parse_args():
    ap = argparse.ArgumentParser()
    ap.add_argument('config', nargs='?', default='chromoo.yaml', help='config file')
    ap.add_argument('-n', '--nsims', type=int, default=-1, help='number of (top) opt simulations to run')
    ap.add_argument('-np', '--nproc', type=int, default=os.cpu_count(), help='number of processes for simulation runs')
    ap.add_argument('-m', '--mean', choices=['rms', 'geometric'], default='rms', help='type of mean used to generate metascore')
    ap.add_argument('-d', '--dir', default='post', help='directory to dump data into')
    ap.add_argument('-c', '--copy', action='store_true', help='copy script to current dir')

    return ap.parse_args()

def main():
    args = parse_args()
    print(args)

    if args.copy:
        shutil.copy(Path(__file__).resolve(), Path.cwd())
        return

    if not Path(args.config).exists():
        raise ValueError(f"Config file {args.config} not found!")

    config = ConfigHandler()
    config.read(args.config)
    config.load()
    config.construct_simulation()

    postdir = Path('post') 
    postdir.mkdir(exist_ok=True)

    opts = post.load_dataframe_sort('opts.csv', config.objective_names, sort_by=args.mean)
    pops = post.load_dataframe_sort('populations', config.objective_names)

    opts.to_csv(postdir / f"opts_{args.mean}.csv")

    post.convergence(pops, args.mean, postdir)
    for par in config.parameter_names:
        post.convergence(pops, par, postdir=postdir, name=f"convergence_{par}")

    post.violin(opts[opts.columns[0:config.n_par]], postdir=postdir, percentile=100)
    post.violin(opts[['rms', 'geometric']], postdir=postdir, name=f'violin_scores')

    opts_nsims = opts.head(args.nsims) if args.nsims != -1 else opts
    sims_opts = post.run_sims_parallel(opts_nsims, config, args.nproc, postdir=postdir, suffix='opts')
    post.performance_range_split(sims_opts, config, postdir=postdir)
    post.performance_split([sims_opts[0]], config, postdir=postdir)
    post.performance_summed(sims_opts, config, postdir=postdir)
    # post.write_objectives(sims_opts, config, postdir=postdir)

    post.response_surface(pops, config, postdir=postdir, opts=opts)

    post.performance_range(sims_opts, config, postdir=postdir)
    # post.performance_combined(sims_opts, config, postdir=postdir, suffix=None)
    # post.response_surface_split(pops, config, postdir=postdir)

if __name__=="__main__":
    main()
