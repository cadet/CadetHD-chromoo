#!/usr/bin/python3

from chromoo import __version__, __git_version__
from chromoo import ChromooProblem, AlgorithmFactory, ConfigHandler, ChromooCallback
from chromoo.utils import plotter
from chromoo.log import Logger
from chromoo.simulation import loadh5

from chromoo.cache import Cache
from chromoo.simulation import run_sim
from chromoo.transforms import transform_population

from pymoo.util.termination.default import MultiObjectiveDefaultTermination

import numpy as np
import argparse
import numpy as np

from datetime import datetime as dt

def main():

    ap = argparse.ArgumentParser()
    ap.add_argument("file", nargs=1, help="yaml config file")
    args = vars(ap.parse_args())

    TIMESTAMP = dt.now().strftime("%Y-%m-%d %H:%M:%S")

    logger = Logger()
    logger.info(f"Starting chromoo at {TIMESTAMP}")
    logger.note('chromoo version', __version__, 'built from git version', __git_version__)

    config = ConfigHandler()
    config.read(args['file'][0])
    config.load()
    config.construct_simulation()

    cache = Cache(config)

    prob = ChromooProblem(config.simulation, config.parameters, config.objectives, nproc=config.nproc, store_temp=config.store_temp, transform = config.parameter_transform)

    term = MultiObjectiveDefaultTermination(
        x_tol       = config.termination.x_tol,
        cv_tol      = config.termination.cv_tol,
        f_tol       = config.termination.f_tol,
        nth_gen     = config.termination.nth_gen,
        n_last      = config.termination.n_last,
        n_max_gen   = config.termination.n_max_gen,
        n_max_evals = config.termination.n_max_evals
    )

    if config.load_checkpoint.is_file(): 
        logger.info(f"Resuming from checkpoint: {config.load_checkpoint}")
        algo, = np.load(config.load_checkpoint, allow_pickle=True).flatten()
        if config.force_checkpoint_continue: 
            algo.has_terminated = False
    else:
        logger.info(f"Starting optimization from scratch!")
        algo = AlgorithmFactory(config.algorithm).get_algorithm()
        algo.setup(prob, term, callback=ChromooCallback(cache), seed=1, verbose=True)

    while algo.has_next():
        algo.next()
        np.save("checkpoint", algo)

    res = algo.result()

    logger.info(f"Took {res.exec_time:.2f} seconds to terminate.")
    logger.info(f"Fitted Parameters (Transformed): {res.X}")
    logger.info(f"SSE: {res.F}")

    logger.info(f"Best solution: {cache.best}")

    if len(config.objectives) == 1: 
        # For single objective systems we get one fixed point
        run_sim(res.X, config.simulation, config.parameters, name='final.h5', store=True)
        sim = loadh5('final.h5')
        plotter(sim, config.objectives) 
    else:
        # For multiobjective systems, we get a set of solutions, a pareto front.
        # We find the parameters that created the best vector magnitude for the
        # scores, and save the simulation and plots.
        # TODO: Fix after implementing combined objective scoring
        pass


    if not config.store_temp:
        import shutil
        shutil.rmtree(prob.tempdir)

    logger.info("Done :)")

if __name__ == "__main__":
    main()
