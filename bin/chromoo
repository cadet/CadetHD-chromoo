#!/usr/bin/env python3

import numpy as np
import argparse

from datetime import datetime as dt

from SALib.sample import sobol_sequence

from pymoo import __version__ as __pymoo_version__
from pymoo.util.termination.default import MultiObjectiveDefaultTermination

from chromoo import __version__, __git_version__
from chromoo import ChromooProblem, AlgorithmFactory, ConfigHandler, ChromooCallback
from chromoo.cache import Cache
from chromoo.log import Logger
from chromoo.transforms import transform_array

def version() -> str: 
    return ( 
            f'Chromoo version {__version__} built from git version {__git_version__}.\n'
            f'Uses pymoo version {__pymoo_version__}'
            )

def main():

    ap = argparse.ArgumentParser()
    ap.add_argument("file", nargs='?', help="yaml config file")
    ap.add_argument("-v", "--version", action='version', 
            version=version(), 
            help="print version information")
    args = vars(ap.parse_args())

    TIMESTAMP = dt.now().strftime("%Y-%m-%d %H:%M:%S")

    logger = Logger()
    logger.info(f"Starting chromoo at {TIMESTAMP}")
    logger.note('chromoo version', __version__, 'built from git version', __git_version__)

    config = ConfigHandler()
    config.read(args['file'])
    config.load()
    config.construct_simulation()

    cache = Cache(config)

    prob = ChromooProblem(config.simulation, config.parameters, config.objectives, nproc=config.nproc, tempdir=config.temp_dir, store_temp=config.store_temp, transform = config.parameter_transform)

    term = MultiObjectiveDefaultTermination(
        x_tol       = config.termination.x_tol,
        cv_tol      = config.termination.cv_tol,
        f_tol       = config.termination.f_tol,
        nth_gen     = config.termination.nth_gen,
        n_last      = config.termination.n_last,
        n_max_gen   = config.termination.n_max_gen,
        n_max_evals = config.termination.n_max_evals
    )

    if config.algorithm.init_sobol: 
        init_pop = sobol_sequence.sample(config.algorithm.pop_size, len(config.par_min_values))
        if config.parameter_transform == 'none':
            # If we don't normalize our inputs
            init_pop = init_pop * (np.array(config.par_max_values) - np.array(config.par_min_values)) + np.array(config.par_min_values)
        config.algorithm.init_pop = init_pop

    if config.load_checkpoint.is_file(): 
        logger.info(f"Resuming from checkpoint: {config.load_checkpoint}")
        algo, = np.load(config.load_checkpoint, allow_pickle=True).flatten()
        if config.force_checkpoint_continue: 
            algo.has_terminated = False
    else:
        logger.info(f"Starting optimization from scratch!")
        algo = AlgorithmFactory(config.algorithm).get_algorithm()
        algo.setup(prob, term, callback=ChromooCallback(cache), seed=1, verbose=True)

    while algo.has_next():
        algo.next()
        np.save("checkpoint", algo)

    res = algo.result()

    logger.info(f"Took {res.exec_time:.2f} seconds ({res.exec_time/3600:.2f} hours) to terminate with {len(cache.opt_Fs)} generations.")
    logger.info(f"Fitted Parameters: {transform_array(res.X, prob.min_values, prob.max_values, config.parameter_transform, mode='inverse')}")
    logger.info(f"Scores: {res.F}")

    if not config.store_temp:
        import shutil
        shutil.rmtree(prob.tempdir)

    logger.info("Done :)")

if __name__ == "__main__":
    main()
